import random

def make_cards(set):
    """
    Η συνάρτηση "ανακατεύει" με τυχαίο τρόπο τις κάρτες που περιέχονται στο set και δημιουργεί μία λίστα
    καρτών όπου το κάθε στοιχείο της (κάρτα) είναι μία λίστα πέντε στοιχείων σύμφωνα με την υπόδειξη της εκφώνησης.
    Η συνάρτηση επιστρέφει αυτή την λίστα με τις κάρτες. Δεν μπορεί να ελεγχθεί με doctests γιατί το
    "ανακάτεμα" γίνεται με τυχαίο τρόπο.
    """
    cards = []
    for i in range(len(set)): # Ο αριθμός των επαναλήψεων είναι ίδιος με τον αριθμό των καρτών.
        j = random.randint(0, len(set)-1)
        if set[j][0] == '1' and set[j][1] == '0': # Ελέγχουμε ξεχωριστά την περίπτωση του 10 γιατί έχει δύο χαρακτήρες.
            item = ['10', set[j][2], 10, set[j], 'X']
        else:
            if set[j][0] == 'J' or set[j][0] == 'Q' or set[j][0] == 'K':
                val = 10
            elif set[j][0] == 'A':
                val = 1;
            else:
                val = int(set[j][0])
            item = [set[j][0], set[j][1], val, set[j], 'X']
        cards.append(item)
        set.remove(set[j]) # Αφαιρούμε την κάρτα από το set.
    return cards

def show_cards(cards, mode):
    """
    Η συνάρτηση εμφανίζει τις κάρτες σε μορφή πίνακα δύο διαστάσεων. Αν η τιμή του ορίσματος mode είναι True,
    η συνάρτηση εμφανίζει όλες τις κάρτες ανοικτές. Αν είναι False, ελέγχουμε την κατάσταση της κάθε κάρτας.
    Αν είναι κλειστή (π.χ. 'Χ') εμφανίζουμε Χ, ενώ αν είναι ανοικτή (π.χ. 'Ο') εμφανίζουμε την κάρτα.

    >>> show_cards([['J', '/', 10, 'J/', 'X'], ['K', '*', 10, 'K*', 'X'],\
                    ['J', '+', 10, 'J+', 'X'], ['K', '-', 10, 'K-', 'X'],\
                    ['Q', '/', 10, 'Q/', 'X'], ['Q', '*', 10, 'Q*', 'X'],\
                    ['9', '+', 9,  '9+', 'X'], ['9', '*', 9,  '9*', 'X']], True)
    J/  K*
    J+  K-
    Q/  Q*
    9+  9*
    >>> show_cards([['J', '/', 10, 'J/', 'X'], ['K', '*', 10, 'K*', 'X'], ['J', '+', 10, 'J+', 'X'], ['K', '-', 10, 'K-', 'X'],\
                    ['Q', '/', 10, 'Q/', 'X'], ['Q', '*', 10, 'Q*', 'X'], ['9', '+', 9,  '9+', 'O'], ['9', '*', 9,  '9*', 'O'],\
                    ['2', '/', 2,  '2/', 'X'], ['A', '*', 1,  'A*', 'O'], ['10', '*', 10, '10*', 'X'], ['7', '+', 7, '7+', 'X']], False)
    X   X   X
    X   X   X
    9+  9*  X
    A*  X   X
    """
    print() 
    cols = len(cards)//4
    for i in range(4):
        for j in range(cols):
            pos = (i*cols)+j
            if mode == True:
                print(cards[pos][3], end = '\t')
            else:
                if cards[pos][4] == 'X':
                    print('X', end = '\t')
                else:
                    print(cards[pos][3], end = '\t') # Εμφανίζουμε την κάρτα.            
        print('\n')

def select_card(play_id, cards, num):
    """
    Η συνάρτηση προτρέπει τον παίκτη που καθορίζεται από το play_id να επιλέξει μία κάρτα δίνοντας την γραμμή και την στήλη της.
    Το όρισμα num δηλώνει τον αριθμό της κάρτας που ανοίγει ο παίκτης. Είναι αλφαριθμητικό με τιμή 'πρώτης', 'δεύτερης' ή 'τρίτης',
    και προστίθεται στο μήνυμα που εμφανίζεται.
    Η συνάρτηση πραγματοποιεί ελέγχους εγκυρότητας, όπως ότι οι τιμές να είναι μέσα στα επιτρεπτά όρια
    καθώς και η κάρτα να μην είναι ήδη ανοικτή. Η συνάρτηση καλεί την show_cards() για να εμφανίσει τις κάρτες και επιστρέφει την θέση του στοιχείου μέσα στη λίστα.
    Δεν μπορεί να ελεγχθεί με doctests καθώς περιλαμβάνει κλήση εισόδου δεδομένων (input).
    """
    while 1:
        try:
            row, col = input('Παίκτη ' + str(play_id) + ': Δώσε γραμμή και στήλη ' + num + ' κάρτας: ').split()
            row = int(row) # μετατροπή από αλφαριθμητικό σε int.
            col = int(col)
            max_cols = len(cards)//4
            row = row-1; # -1 γιατί η αρίθμηση των στοιχείων στη λίστα αρχίζει από την θέση 0.
            col = col-1;
            if row >= 0 and row <= 3:
                if col >= 0 and col < max_cols:
                    pos = (row*max_cols)+col
                    if cards[pos][4] == 'O':
                        print('Η κάρτα είναι ήδη ανοικτή. ')
                    else:
                        cards[pos][4] = 'O' # Ανοίγουμε την κάρτα.
                        break
            print('Λάθος εισαγωγή στοιχείων. Δοκιμάστε ξανά ...')                
        except ValueError:
            print('Λάθος εισαγωγή στοιχείων. Δοκιμάστε ξανά ...')
    show_cards(cards, False)            
    return pos

def add_points(total_points, play_id, points):
    """
    Η συνάρτηση προσθέτει τους πόντους (points) του παίκτη που καθορίζεται από το play_id στους συνολικούς του πόντους.
    Η λίστα total_points περιέχει τους πόντους όλων των παικτών. Η συνάρτηση εμφανίζει ανάλογο μήνυμα, όπως και στην εκφώνηση της άσκησης.
    >>> add_points([10, 20, 30], 1, 5)
    Επιτυχές ταίριασμα +5 πόντοι! Παίκτη 1 έχεις συνολικά 15 πόντους.
    >>> add_points([10, 20, 30], 3, 10)
    Επιτυχές ταίριασμα +10 πόντοι! Παίκτη 3 έχεις συνολικά 40 πόντους.
    """
    total_points[play_id-1] = total_points[play_id-1] + points
    print('Επιτυχές ταίριασμα +' + str(points) + ' πόντοι! Παίκτη ' + str(play_id)
              + ' έχεις συνολικά ' + str(total_points[play_id-1]) + ' πόντους.\n')

def show_winner(points):
    """
    Η συνάρτηση δέχεται σαν όρισμα την λίστα που περιέχει τους πόντους των παικτών και εμφανίζει τους πόντους του νικητή
    ή των νικητών σε περίπτωση ισοβαθμίας.
    >>> show_winner([10, 20, 30])
    Νικητής είναι ο παίκτης_3 με 30 πόντους συνολικά !!!
    >>> show_winner([10, 30, 30])
    Νικητής είναι ο παίκτης_2 με 30 πόντους συνολικά !!!
    Νικητής είναι ο παίκτης_3 με 30 πόντους συνολικά !!!
    """
    max_pnts = 0
    for i in range(len(points)):
        if points[i] > max_pnts:
            max_pnts = points[i]

    for i in range(len(points)): # Κάνουμε και δεύτερη επανάληψη για να ελέγξουμε την περίπτωση ισοβαθμιών.
        if points[i] == max_pnts:
            print('Νικητής είναι ο παίκτης_' + str(i+1) + ' με '
                  + str(max_pnts) + ' πόντους συνολικά !!!')


################# ΚΥΡΙΟ ΠΡΟΓΡΑΜΜΑ ########################

easy_set = ['10\u2660', '10\u2666', '10\u2663', '10\u2665',
            'J\u2660', 'J\u2666', 'J\u2663', 'J\u2665',
            'Q\u2660', 'Q\u2666', 'Q\u2663', 'Q\u2665',
            'K\u2660', 'K\u2666', 'K\u2663', 'K\u2665']
            
med_set = ['A\u2660', 'A\u2666', 'A\u2663', 'A\u2665',
           '2\u2660', '2\u2666', '2\u2663', '2\u2665',
           '3\u2660', '3\u2666', '3\u2663', '3\u2665',
           '4\u2660', '4\u2666', '4\u2663', '4\u2665',
           '5\u2660', '5\u2666', '5\u2663', '5\u2665',
           '6\u2660', '6\u2666', '6\u2663', '6\u2665',
           '7\u2660', '7\u2666', '7\u2663', '7\u2665',
           '8\u2660', '8\u2666', '8\u2663', '8\u2665',
           '9\u2660', '9\u2666', '9\u2663', '9\u2665',
           '10\u2660', '10\u2666', '10\u2663', '10\u2665']

hard_set = ['A\u2660', 'A\u2666', 'A\u2663', 'A\u2665',
           '2\u2660', '2\u2666', '2\u2663', '2\u2665',
           '3\u2660', '3\u2666', '3\u2663', '3\u2665',
           '4\u2660', '4\u2666', '4\u2663', '4\u2665',
           '5\u2660', '5\u2666', '5\u2663', '5\u2665',
           '6\u2660', '6\u2666', '6\u2663', '6\u2665',
           '7\u2660', '7\u2666', '7\u2663', '7\u2665',
           '8\u2660', '8\u2666', '8\u2663', '8\u2665',
           '9\u2660', '9\u2666', '9\u2663', '9\u2665',
           '10\u2660', '10\u2666', '10\u2663', '10\u2665',
           'J\u2660', 'J\u2666', 'J\u2663', 'J\u2665',
           'Q\u2660', 'Q\u2666', 'Q\u2663', 'Q\u2665',
           'K\u2660', 'K\u2666', 'K\u2663', 'K\u2665']

test_set = ['J/', 'K*', 'J+', 'K-', 'Q/', 'Q*', '10+', '10-']
         
print('Καλωσήλθατε στο Matching Game\n')
while 1:
    try:
        max_players = int(input('Δώστε αριθμό παικτών: '))
        if max_players > 1:
            break;
        print('Λάθος εισαγωγή στοιχείων. Δοκιμάστε ξανά ...')        
    except ValueError:
        print('Λάθος εισαγωγή στοιχείων. Δοκιμάστε ξανά ...')    

while 1:
    try:
        level = int(input('\nΔώστε επίπεδο δυσκολίας Εύκολο (1), Μέτριο (2), Δύσκολο (3): '))
        if level == 1 or level == 2 or level == 3:
            break;
        print('Λάθος εισαγωγή στοιχείων. Δοκιμάστε ξανά ...')
    except ValueError:
        print('Λάθος εισαγωγή στοιχείων. Δοκιμάστε ξανά ...')    

if level == 1:
    cards = make_cards(easy_set)
elif level == 2:
    cards = make_cards(med_set)
else:
    cards = make_cards(hard_set)

#cards = make_cards(test_set)

show_cards(cards, True) # Για την διευκόλυνση επίδειξης, την πρώτη φορά
#εμφανίζουμε όλες τις κάρτες ανοικτές.
show_cards(cards, False) # Κλείνουμε τις κάρτες

total_points = [] # Λίστα στην οποία αποθηκεύουμε τους πόντους των παικτών.
for i in range(max_players): # Μηδενίζουμε τους πόντους των παικτών.
    total_points.append(0)

total_cards = len(cards)
open_cards = 0 # Μεταβλητή που μετράει πόσες κάρτες είναι ανοικτές.
play_id = 1 # Πρώτος παίκτης.

# Το παιχνίδι τερματίζει όταν όλες οι κάρτες είναι ανοικτές.
while(open_cards != total_cards):
    first_pos = select_card(play_id, cards, 'πρώτης') # Ο παίκτης επιλέγει την πρώτη κάρτα
    sec_pos = select_card(play_id, cards, 'δεύτερης') # Ο παίκτης επιλέγει την δεύτερη κάρτα

    # Συγκρίνουμε τις κάρτες
    if cards[first_pos][0] == cards[sec_pos][0]: # Σημαίνει ότι έχουν το ίδιο σύμβολο.
        add_points(total_points, play_id, cards[first_pos][2])
        open_cards = open_cards+2
        # Ελέγχουμε για ειδικές κάρτες.
        if cards[first_pos][0] != 'J': # Αν είναι J παίζει ο ίδιος πάλι.
            if cards[first_pos][0] == 'K':
                play_id = play_id+2 # Ο επόμενος χάνει την σειρά του.
            else:
                play_id = play_id+1 # Παίζει ο επόμενος.
    else: # Οι κάρτες είναι ανόμοιες
        # Ελέγχουμε την ειδική περίπτωση για ντάμα και ρήγα.
        if ((cards[first_pos][0] == 'Q' and cards[sec_pos][0] == 'K') or
            (cards[first_pos][0] == 'K' and cards[sec_pos][0] == 'Q')):
            third_pos = select_card(play_id, cards, 'τρίτης') # Ανοίγει και τρίτη κάρτα.
            # Ξέρουμε ότι οι δύο πρώτες κάρτες που έχει ανοίξει είναι ανόμοιες (αφού είναι οι Q και K),
            # οπότε συγκρίνουμε κάθε μία από αυτές με την τρίτη κάρτα.
            if cards[first_pos][0] == cards[third_pos][0]:
                add_points(total_points, play_id, cards[first_pos][2])
                open_cards = open_cards+2
                cards[sec_pos][4] = 'X' # Κλείνουμε την ανόμοια κάρτα.
            elif cards[sec_pos][0] == cards[third_pos][0]:
                add_points(total_points, play_id, cards[sec_pos][2])
                open_cards = open_cards+2
                cards[first_pos][4] = 'X' # Κλείνουμε την ανόμοια κάρτα.
            else:
                # Κλείνουμε και τις τρεις κάρτες, αφού είναι ανόμοιες.
                print('Ανεπιτυχές ταίριασμα!')
                cards[first_pos][4] = cards[sec_pos][4] = cards[third_pos][4] = 'X' 
        else:
            print('Ανεπιτυχές ταίριασμα!')
            cards[first_pos][4] = cards[sec_pos][4] = 'X' # Κλείνουμε τις κάρτες.
            
        play_id = play_id+1 # Παίζει ο επόμενος.
        show_cards(cards, False)

    if play_id > max_players:
        play_id = play_id - max_players

# Τέλος προγράμματος, εμφάνιση νικητή.
show_winner(total_points)
